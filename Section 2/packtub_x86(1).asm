;Packtub assembly sample
main: # @main
  ;begin prolog assembly function
  ;ebp (frame pointer). On entry to our main function, 
  ;we use it to remapping the stack in order to save the value for the calling function i.e.
  ; add ebp's value to the stack
  push ebp
  ;copy the stack pointer, into the base pointer so that it points to our main function
  mov ebp, esp
  ;end prolog assembly function
  ;reserve space for local variables i.e 8 bytes
  sub esp, 8
  ;find an effective address to load our string into
  lea eax, [.L.str]
   ; DWORD PTR means Double-word property which is 32 bits i.e.
   ; "move the string to the 32 bits of the stack in a place which 
   ; starts with the address of the stack pointer.
  mov dword ptr [esp], eax
  ; call the printf function
  call printf
  ;clear the ecx register or set it to zero
  xor ecx, ecx
  mov dword ptr [ebp - 4], eax # 4-byte Spill
  ; Move the 4 bytes in memory at the address contained in ecx into EAX
  mov eax, ecx
  ;add 8 to the stack pointer
  add esp, 8
  ;remove ebp value from the stack
  pop ebp
  ret
  ; Our static string
.L.str:
  .asciz "Packtub Rules"
  
  
  
  